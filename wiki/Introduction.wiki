#summary Introduction to the framework

= Introduction =

This is a Python framework to fight poker bots against each other.  It supports bots in C++ and Java using [http://code.google.com/apis/protocolbuffers/docs/overview.html protocol buffers].  For how to use C++ and Java see LanguagesThatAreNotPython.

It's rough around the edges, and not yet tested at all.  There's an even chance you'll get a NotYetImplemented error as I haven't done the pot splitting yet, and the final round has a 50% chance of requiring it.

To try it out, click on the source tab up top, check it out over SVN and run 'python main.py' in the folder you checked out.  You can [http://www.python.org/download/releases/2.6.1/ download Python] for your operating system if you don't already have it.

= Most Basic Bot =

{{{
from bot import Bot
from poker_game import Action

class FoldBot(Bot):
    def turn(self):
        print "Bot %d events in queue:" % self.id
        for event in self.event_queue:
            print event
        self.event_queue = []
        return Action('fold')
}}}

This bot ignores whatever is happening and folds every time.  A fancier bot would use some of the other actions.

The actions and events are instances of objects with the specified properties implemented as member variables.  The type of each is stored in the .type variable.  For instance the following Action:
{{{
Action('raise',amount=2)
}}}

Has the following properties:
{{{
Action.type == 'raise'
Action.amount == 2
}}}

== Actions ==

'fold',
    fold means you quit this round
'call', 
   call means you match the current high bet
'raise' amount
   raise means you match the current high bet and add some amount to it
'check' (not available on first round, except for the big blind)
   a check is just a pass

== Events ==

  * (type) (properties)
  * 'join' player_id credits
  * 'new_round'
  * 'button' player_id
  * 'big_blind' player_id
  * 'small_blind' player_id
  * 'deal' cards
  * 'flop' cards -> first three community cards
  * 'turn' card  -> fourth community card
  * 'river' card -> fifth community card
  * 'action' player_id action
  * 'adjust_credits'  player_id (+/-)amount
  * 'win' player_id rank amount -> there is also an adjust_credits event for this
                            in the case that there are multiple winners
                            the rank will indicate who won first, second etc (int)
  * 'end_of_round'
  * 'quit' player_id
  * 'bad_bot' message action -> last action by your bot was determined to be invalid

=== property types ===
  * credits: int
  * player_id: int
  * card: (rank, suit) -> (int, char) -> int is 2-14 for card value, char is one of 'd', 'h', 's', 'c'
  * action: one of the actions from above
  * message: str